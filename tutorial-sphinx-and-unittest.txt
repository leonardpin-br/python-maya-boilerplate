VIRTUAL ENVIRONMENT
================================================================================
================================================================================



Virtual environment
It is necessary to install, in the operating system, the same
Python version as the interpreter embedded in Autodesk Maya.
Then, it is necessary to install the virtual environment
package (in that same Python version).
================================================================================

pip install virtualenv

# In this starter kit, the virtual environment folder is py27env.
# Below is the creation of the virtual environment.
# https://stackoverflow.com/a/1534343
virtualenv --python="C:/Program Files/Python27/python.exe" "./py27env"

# Activation of the virtual environment:
source ./py27env/Scripts/activate


Installation of all packages if there is a requirements.txt file
--------------------------------------------------------------------------------

pip install -r requirements.txt




SPHINX
================================================================================
================================================================================



Installation of documentation packages
================================================================================


Sphinx's intallation, upgrade and verification.
	pip install
	https://pip.pypa.io/en/latest/cli/pip_install/#cmdoption-U
--------------------------------------------------------------------------------

pip install sphinx

pip install --upgrade sphinx

sphinx-build --version


Sphinx's packages installation
--------------------------------------------------------------------------------

pip install sphinxcontrib-napoleon

pip install sphinx_rtd_theme

pip install todo

pip install autodoc



Project Folder structure:
================================================================================

<project_root_folder>
├── .vscode
├── docs
│   ├── coverage
│   └── sphinx
├── node_modules
├── py27env
├── resources
├── scripts
├── src          <= Files to be documented.
├── tests        <= TESTS WILL NOT BE DOCUMENTED.
├── .coveragerc
├── .gitattributes
├── .gitignore
├── LICENSE
├── package-lock.json
├── package.json
├── README.md
├── requirements.txt
└── tutorial-sphinx-and-unittest.txt

# Generated with the tree command (and further edited):
tree --dirsfirst -a -I ".git|node_modules|py27env" > tree.txt



Sphinx - 1: Running the assistant
	What Sphinx calls "root path" is the docs folder.
	The command below runs the assistant in the docs foler.
================================================================================

sphinx-quickstart docs/sphinx

# Write "y" (without quotes) and press Enter.
Separate source and build directories (y/n) [n]:


Folder structure (inside docs) created by the Sphinx's assistant
--------------------------------------------------------------------------------

docs
├── coverage (folder inside was omitted in this structure)
├── sphinx
│       ├── build
│       ├── source
│       │   ├── _static
│       │   ├── _templates
│       │   ├── .gitignore
│       │   ├── conf.py
│       │   └── index.rst
│       ├── make.bat
│       └── Makefile



Sphinx - 2: Editing the configuration files
================================================================================


Editing the file ./docs/sphinx/source/conf.py
    https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#confval-autodoc_mock_imports
--------------------------------------------------------------------------------
# Uncomment
	import os
	import sys

sys.path.insert(0, os.path.abspath('../../../src')) <= From . to ../../../src

extensions = [
    'sphinx.ext.napoleon',
    'sphinx.ext.todo',
    'sphinx.ext.autodoc'
]

autodoc_mock_imports = [    <= Auto mock in the conf.py file.
    # 'maya',
    # 'pymel',
    # 'PySide2'
]

master_doc = 'index'    <= Added

html_theme = 'sphinx_rtd_theme'


Creation of Sphinx sources (use sphinx.ext.autodoc)
	Sphinx sources are the base to the creation of the HTML documentation.

	Flags:
	--force	Force overwriting of any existing generated files.
	-o		Directory to place the output files. If it does not exist, it is created.

	It will create one .rst file for each python script.
--------------------------------------------------------------------------------

sphinx-apidoc --force -o ./docs/sphinx/source ./src


Editing the file ./docs/sphinx/source/index.rst
	The step above created some files, including modules.rst.
	This file acts as a list to the names of the other .rst files that were
    created.

	The name (without extension) of this file (modules.rst) must be placed
	in the index.rst below (and aligned with) the .. toctree::
--------------------------------------------------------------------------------

.. toctree::
   :maxdepth: 2
   :caption: Contents:

   modules		<= Name inserted (3 spaces indentation).



Sphinx - 3: Creating the HTML files
	Run command in each sub directory using PowerShell
	https://stackoverflow.com/questions/13249034/run-command-in-each-sub-directory-using-powershell#answer-13251065
================================================================================

cd ./docs/sphinx; make html; cd ..; cd ..;


Important to know
--------------------------------------------------------------------------------
The src folder MUST NOT have the __init__.py file, that is, must not be a
package, bacause Sphinx shows an error and does not create the documentation.

The subfolders inside the src folder must have the __init__.py file, that is,
the subfolders must be packages.

The Maya modules can be 'mocked' (for Sphinx) importing the mock module (not a
good idea) or adding the autodoc_mock_imports list to the conf.py file
(preferred).

The tests folder will not be documented.




UNIT TESTS
================================================================================
================================================================================


Coverage folder structure (inside docs)
--------------------------------------------------------------------------------

<project_root_folder>
├── docs
│   ├── coverage
│   │   └── htmlcov
├── sphinx (subfolders were omitted in this structure)


Installation of mock package inside the virtual environment
--------------------------------------------------------------------------------

# Necessary for running unit tests.
pip install mock


Code inside the unit tests modules
    https://stackoverflow.com/questions/8658043/how-to-mock-an-import
--------------------------------------------------------------------------------

import os
import sys
import unittest     <= (It is not necessary for documentation, but it's essential to unittest in the test_main.py file)
import mock         <= (It is not necessary for documentation, but it's essential to unittest in the test_main.py file)

# Autodesk Maya modules that need to be mocked:
maya_modules = [
    'maya',
    'maya.app',
    'maya.app.general',
    'maya.app.general.mayaMixin',
    'cmds',
    'mel',
    'pymel',
    'pymel.core'
    'MayaQWidgetBaseMixin',
    'MayaQWidgetDockableMixin',
    'PySide2',
    'PySide2.QtUiTools',
    'QtWidgets',
    'QUiLoader'
]

# Creates a mock for every module in the maya_modules list.
for mod in maya_modules:
    sys.modules[mod] = mock.MagicMock()     <= (It is not necessary for documentation, but it's essential to unittest in the test_main.py file)

# Adds the boilerplate folder to sys.path, if it not already there,
# so unit tests can see the modules:
tests_dir = os.path.dirname(os.path.realpath(__file__))     # tests
root_dir = os.path.dirname(tests_dir)                       # <root_directory>
src_dir = os.path.join(root_dir, "src")

for path in sys.path:
    if path == src_dir:
        break
else:
    sys.path.append(src_dir)

# Imports the <root_directory>/src/main.py module.
import main


Important to know
--------------------------------------------------------------------------------
The __init__.py files were omitted from coverage reports (.coveragerc).

The tests folder and the subfolders MUST be packages (have __init__.py in them)
for unittest to work.

To avoid execution (and unavoidable failure) of Maya modules, it is necessary to
mock those modules. This technique is commonly used in unit testing.




REFERENCES (teste)
================================================================================
================================================================================


Main reference for this tutorial
Learn Sphinx python documentation | Episode 01.
https://www.youtube.com/watch?v=fX07G5eUSsY
--------------------------------------------------------------------------------


How to make a folder clean with PowerShell
	How Can I Delete a File or Folder from the Command Line Using Windows PowerShell?
	https://petri.com/delete-folder-file-from-command-line-powershell/
--------------------------------------------------------------------------------

Remove-Item -Path ./docs/* -Recurse -Force
