#!/bin/bash

# This script mimics, loosely and in a very crud way, the
# phpunit-skeleton-generator.
#
# This script receives, as argument, the name of the python file that is going
# to be tested.
#
# REFERENCES:
# https://github.com/VitexSoftware/phpunit-skeleton-generator
# https://stackoverflow.com/questions/29713541/recursive-unittest-discover#answer-29715336

include() {
    # MY_DIR corresponds to the folder where this file is.
    MY_DIR=$(dirname $(readlink -f $0))
    . $MY_DIR/$1
}

# Included files
include "utils.sh"

# Inserts the header in the given test file.
# param1 (string): The test file full path.
insert_test_header() {

    local this_script=`basename "$0"`
    local this_date=$(date +'%Y-%m-%d')
    local this_time=$(date +"%T")

    local	file_content="# -*- coding: utf-8 -*-\n"
            file_content="${file_content}u'''Generated by ${this_script} on ${this_date} at ${this_time}.\n"
            file_content="${file_content}'''\n"
            file_content="${file_content}import os\n"
            file_content="${file_content}import sys\n"
            file_content="${file_content}import unittest\n"
            file_content="${file_content}import mock\n"
            file_content="${file_content}\n"
            file_content="${file_content}maya_modules = [\n"
            file_content="${file_content}\t'maya',\n"
            file_content="${file_content}\t'maya.app',\n"
            file_content="${file_content}\t'maya.app.general',\n"
            file_content="${file_content}\t'maya.app.general.mayaMixin',\n"
            file_content="${file_content}\t'cmds',\n"
            file_content="${file_content}\t'mel',\n"
            file_content="${file_content}\t'pymel',\n"
            file_content="${file_content}\t'pymel.core'\n"
            file_content="${file_content}\t'MayaQWidgetBaseMixin',\n"
            file_content="${file_content}\t'MayaQWidgetDockableMixin',\n"
            file_content="${file_content}\t'PySide2',\n"
            file_content="${file_content}\t'PySide2.QtUiTools',\n"
            file_content="${file_content}\t'QtWidgets',\n"
            file_content="${file_content}\t'QUiLoader'\n"
            file_content="${file_content}]\n"
            file_content="${file_content}\n"
            file_content="${file_content}for mod in maya_modules:\n"
            file_content="${file_content}\tsys.modules[mod] = mock.MagicMock()\n"
            file_content="${file_content}\n"

    echo -e "$file_content" >> $1
}

# Creates an unit test file from the filename given as argument.
# param1 (string): The filename.
unittest_skeleton_generator() {

    # Clear the terminal window.
    clear

    # Receives the ${fileBasename} (filename with extension).
    local file_to_be_tested="$1"

    local app_folder="boilerplate"
    local tests_folder="tests"
    local root_dir=$(get_root_directory)
    local app_folder_full_path="$root_dir/$app_folder"
    local file_full_path=$(find "$app_folder_full_path" -name "$file_to_be_tested")

    # Verifies if the argument was passed, and if the file exists.
    # https://stackoverflow.com/a/21164441
    if [ -f $file_to_be_tested ]; then
        print_error_message "This script receives, as argument, the name of the python file (with extension) that is going to be tested."
        exit 1
    elif [[ ! -f $file_full_path ]]; then
        print_error_message "File to be tested not found."
        exit 1
    fi

    # Builds the relative path, removing the first part of the string path:
    # https://stackoverflow.com/a/16623897
    local file_relative_path=${file_full_path#"$root_dir"}  # /boilerplate/shared/functions.py

    # Builds the test relative path:
    # https://stackoverflow.com/a/23715370
    local test_relative_path=$(echo "$file_relative_path" | sed -e "s/$app_folder/$tests_folder/")

    # Back up of IFS.
    # https://stackoverflow.com/a/10586169
    local original_IFS=$IFS

    # Changes IFS and breaks the path into an array.
    IFS='/' read -r -a path_array <<< "$file_relative_path"

    # Restores IFS.
    IFS=$original_IFS

    # Stores the number of levels the file is below the app_folder.
    local levels_deep=0

    # Loops through array backwards:
    # https://stackoverflow.com/a/13360181
    # https://www.baeldung.com/linux/bash-script-counter#2-using-the-bash-arithmetic-expansion
    for (( idx=${#path_array[@]}-1 ; idx>=0 ; idx-- )) ; do
        if [ "${path_array[idx]}" = "$app_folder" ]; then
            break
        fi
        levels_deep=$(( levels_deep + 1 ))
    done

    # Removes the prefix if necessary.
    root_dir=$(remove_prefix $root_dir)



    local test_full_path="${root_dir}${test_relative_path}"

    # Removes the suffix
    # https://stackoverflow.com/a/16623897
    local test_folder_full_path=${test_full_path%"$file_to_be_tested"}
    local init_file="${test_folder_full_path}__init__.py"

    # Create test folder (the path to it) if it does not exist.
    # https://stackoverflow.com/a/793867/3768670
    mkdir -p $test_folder_full_path

    # If the __init__.py does not exist, create it.
    if [ ! -f $init_file ]; then

        # Creates the __init__.py file.
        touch $init_file

    fi

    # If the test file already exists, exit this script.
    if [ -f $test_full_path ]; then

        print_error_message "The test file already exists."
        exit 1

    fi

    # Creates the test file.
    touch $test_full_path

    insert_test_header $test_full_path


    # TODO:
    # Work the content of the file using levels deep
    # Function for sys.path and import
    # Function for class creation
    # Function for methods creation
    echo -e "test"




    # # Will hold every image path in the file.
    # local NEW_FILE_PATH=""

    # # Loops through the array searching for each
    # # image filename in the theme file.
    # for i in "${image_files[@]}"; do

    #     # Builds the new line.
    #     NEW_FILE_PATH="    image: url(\"$IMG_DIR/$i\");"

    #     # Removes the old line containing the image filename
    #     # and adds the new one.
    #     sed -i "s+.*$i.*+$NEW_FILE_PATH+" $THEME

    # done

    # echo -e "The paths in the theme file were updated."
    # exit 0

}

unittest_skeleton_generator $1
# unittest_skeleton_generator "ui_functions.py"