Main reference for this tutorial
Learn Sphinx python documentation | Episode 01.
https://www.youtube.com/watch?v=fX07G5eUSsY
================================================================



How to make a folder clean with PowerShell
	How Can I Delete a File or Folder from the Command Line Using Windows PowerShell?
	https://petri.com/delete-folder-file-from-command-line-powershell/
================================================================

Remove-Item -Path ./docs/* -Recurse -Force



Virtual environment
================================================================

pip install virtualenv

virtualenv py27env

source ./py27env/Scripts/activate



Installation
================================================================


Sphinx's intallation, upgrade and verification.
	pip install
	https://pip.pypa.io/en/latest/cli/pip_install/#cmdoption-U
----------------------------------------------------------------

pip install sphinx

pip install --upgrade sphinx

sphinx-build --version

pip install mock (It works, but it is not necessary)



Sphinx's packages installation
----------------------------------------------------------------

pip install sphinxcontrib-napoleon

pip install sphinx_rtd_theme

pip install todo

pip install autodoc


Project Folder structure:
================================================================

project_root_folder
├── boilerplate
├   ├── subpackage
├   |   ├── example_classes.py          <= File to be documented.
├   ├── main.py                         <= File to be documented.
├── docs
├   ├── coverage
├   ├── sphinx
├── resources
├── scripts
├── tests                               <= TESTS WILL NOT BE DOCUMENTED.
├   ├── subpackage
├   |   ├── test_example_classes.py
├   ├── test_main.py
├── .coveragerc
├── package.json

* The __init__.py files were omitted.


Sphinx - 1: Running the assistant
	What Sphinx calls "root path" is the docs folder.
	The command below runs the assistant in the docs foler.
================================================================

sphinx-quickstart docs/sphinx

Separate source and build directories (y/n) [n]: Write "y" (without quotes) and press Enter.


Folder structure (inside docs) created by the Sphinx's assistant
----------------------------------------------------------------

docs
├── coverage (folder inside was omitted)
├── sphinx
├   ├── build
├   ├── source
├   ├	├── _static
├   ├	├── _templates
├   ├	├── conf.py
├   ├	├── index.rst
├   ├── make.bat
├   └── Makefile



Sphinx - 2: Editing the configuration files
================================================================


Editing the file ./docs/sphinx/source/conf.py
----------------------------------------------------------------
https://stackoverflow.com/questions/8658043/how-to-mock-an-import
Uncomment
	import os
	import sys
    import mock     <= (It is not necessary for documentation, but it's essential to unittest in the test_main.py file)

maya_modules = [    <= (It is not necessary for documentation, but it's essential to unittest in the test_main.py file)
    'maya',
    'maya.app',
    'maya.app.general',
    'maya.app.general.mayaMixin',
    'cmds',
    'mel',
    'pymel',
    'pymel.core'
    'MayaQWidgetBaseMixin',
    'MayaQWidgetDockableMixin',
    'PySide2',
    'PySide2.QtUiTools',
    'QtWidgets',
    'QUiLoader'
]

for mod in maya_modules:                    <= (It is not necessary for documentation, but it's essential to unittest in the test_main.py file)
    sys.modules[mod] = mock.MagicMock()     <= (It is not necessary for documentation, but it's essential to unittest in the test_main.py file)

sys.path.insert(0, os.path.abspath('../../../boilerplate')) <= From . to ../../../boilerplate

extensions = [
    'sphinxcontrib.napoleon',
    'sphinx.ext.todo',
    'sphinx.ext.autodoc'
]

autodoc_mock_imports = [    <= Much cleaner solution for mock in the conf.py file.
    'maya',
    'pymel',
    'PySide2'
]

master_doc = 'index'    <= Added

html_theme = 'sphinx_rtd_theme'


Creation of Sphinx sources (use sphinx.ext.autodoc)
	Sphinx sources are the base to the creation of the HTML documentation.

	Flags:
	--force	Force overwriting of any existing generated files.
	-o		Directory to place the output files. If it does not exist, it is created.

	It will create one .rst file for each python script.
----------------------------------------------------------------

sphinx-apidoc --force -o ./docs/sphinx/source ./boilerplate


Editing the file ./docs/sphinx/source/index.rst
	The step above created some files, including modules.rst.
	This file acts as a list to the names of the other .rst
	files that were created.

	The name (without extension) of this file (modules.rst) must be placed
	in the index.rst below (and aligned with) the .. toctree::
----------------------------------------------------------------

.. toctree::
   :maxdepth: 2
   :caption: Contents:

	modules		<= Name inserted.



Sphinx - 3: Creating the HTML files
	Run command in each sub directory using PowerShell
	https://stackoverflow.com/questions/13249034/run-command-in-each-sub-directory-using-powershell#answer-13251065
================================================================

cd ./docs/sphinx; make html; cd ..; cd ..;



Relationship with unittest
    The boilerplate folder (the old src folder) MUST NOT have
    the __init__.py file, that is, must not be a package,
    bacause Sphinx shows an error and does not create the
    documentation.
    The subfolders inside the boilerplate folder (old src)
    must have the __init__.py file, that is, the
    subfolders must be packages.

    The tests folder and the subfolders MUST be packages
    (have __init__.py in them) for unittest to work.
    The tests folder will not be documented.

    To avoid execution (and unavoidable failure) of Maya modules,
    it is necessary to mock those modules. This technique is
    commonly used in unit testing.
    The Maya modules can be 'mocked' importing the mock module
    or adding the autodoc_mock_imports array in the conf.py file.
================================================================